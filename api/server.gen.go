// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	TraceScopes      = "trace.Scopes"
)

// Defines values for CollectionDataType.
const (
	ARRAY             CollectionDataType = "ARRAY"
	BFLOAT16VECTOR    CollectionDataType = "BFLOAT16_VECTOR"
	BINARYVECTOR      CollectionDataType = "BINARY_VECTOR"
	BOOL              CollectionDataType = "BOOL"
	FLOAT             CollectionDataType = "FLOAT"
	FLOAT16VECTOR     CollectionDataType = "FLOAT16_VECTOR"
	FLOATVECTOR       CollectionDataType = "FLOAT_VECTOR"
	INT16             CollectionDataType = "INT16"
	INT32             CollectionDataType = "INT32"
	INT64             CollectionDataType = "INT64"
	INT8              CollectionDataType = "INT8"
	JSON              CollectionDataType = "JSON"
	SPARSEFLOATVECTOR CollectionDataType = "SPARSE_FLOAT_VECTOR"
	VARCHAR           CollectionDataType = "VARCHAR"
)

// Defines values for CollectionIndexIndexType.
const (
	BINFLAT             CollectionIndexIndexType = "BIN_FLAT"
	BINIVFFLAT          CollectionIndexIndexType = "BIN_IVF_FLAT"
	DISKANN             CollectionIndexIndexType = "DISKANN"
	FLAT                CollectionIndexIndexType = "FLAT"
	GPUIVFFLAT          CollectionIndexIndexType = "GPU_IVF_FLAT"
	GPUIVFPQ            CollectionIndexIndexType = "GPU_IVF_PQ"
	HNSW                CollectionIndexIndexType = "HNSW"
	IVFFLAT             CollectionIndexIndexType = "IVF_FLAT"
	IVFPQ               CollectionIndexIndexType = "IVF_PQ"
	IVFSQ8              CollectionIndexIndexType = "IVF_SQ8"
	SPARSEINVERTEDINDEX CollectionIndexIndexType = "SPARSE_INVERTED_INDEX"
	SPARSEWAND          CollectionIndexIndexType = "SPARSE_WAND"
)

// Defines values for CollectionIndexMetricType.
const (
	COSINE  CollectionIndexMetricType = "COSINE"
	HAMMING CollectionIndexMetricType = "HAMMING"
	IP      CollectionIndexMetricType = "IP"
	JACCARD CollectionIndexMetricType = "JACCARD"
	L2      CollectionIndexMetricType = "L2"
)

// Defines values for InvocationState.
const (
	Available InvocationState = "available"
	Cancelled InvocationState = "cancelled"
	Completed InvocationState = "completed"
	Discarded InvocationState = "discarded"
	Running   InvocationState = "running"
)

// Defines values for MessageRole.
const (
	Assistant MessageRole = "assistant"
	System    MessageRole = "system"
	User      MessageRole = "user"
)

// Defines values for Permission.
const (
	Admin             Permission = "admin"
	ConfigRead        Permission = "config:read"
	InvocationCreate  Permission = "invocation:create"
	InvocationRead    Permission = "invocation:read"
	InvocationRespond Permission = "invocation:respond"
)

// Agent defines model for Agent.
type Agent struct {
	CreatedAt int64  `json:"created_at"`
	Id        int64  `json:"id"`
	Name      string `json:"name"`
}

// AgentCreate defines model for AgentCreate.
type AgentCreate struct {
	Name string `json:"name"`
}

// ApiToken defines model for ApiToken.
type ApiToken struct {
	AgentId     int64        `json:"agent_id"`
	CreatedAt   int64        `json:"created_at"`
	CreatedBy   string       `json:"created_by"`
	ExpireAt    int64        `json:"expire_at"`
	Id          string       `json:"id"`
	Permissions []Permission `json:"permissions"`
}

// ApiTokenCreate defines model for ApiTokenCreate.
type ApiTokenCreate struct {
	AgentId     int64    `json:"agent_id"`
	CreatedBy   string   `json:"created_by"`
	ExpireAt    int64    `json:"expire_at"`
	Id          string   `json:"id"`
	Permissions []string `json:"permissions"`
}

// CollectionDataType defines model for CollectionDataType.
type CollectionDataType string

// CollectionField defines model for CollectionField.
type CollectionField struct {
	DataType  *CollectionDataType `json:"data_type,omitempty"`
	IsPrimary *bool               `json:"is_primary,omitempty"`

	// MaxLength The maximum length of the field. It's mandatory for VARCHAR data type.
	MaxLength *int    `json:"max_length,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// CollectionIndex defines model for CollectionIndex.
type CollectionIndex struct {
	FieldName  *string                    `json:"field_name,omitempty"`
	IndexName  *string                    `json:"index_name,omitempty"`
	IndexType  *CollectionIndexIndexType  `json:"index_type,omitempty"`
	MetricType *CollectionIndexMetricType `json:"metric_type,omitempty"`
	Parameter  *struct {
		// M M defines tha maximum number of outgoing connections in the graph. Higher M leads to higher accuracy/run_time at fixed ef/efConstruction. Required when index type is *HNSW*.
		M *int `json:"M,omitempty"`

		// DropRatioBuild The proportion of small vector values that are excluded during the indexing process. This option allows fine-tuning of the indexing process, making a trade-off between efficiency and accuracy by disregarding small values when building the index. It's required when index type is *SPARSE_INVERTED_INDEX* or *SPARSE_WAND*.
		DropRatioBuild *float32 `json:"drop_ratio_build,omitempty"`

		// EfConstruction ef_construction controls index search speed/build speed tradeoff. Increasing the efConstruction parameter may enhance index quality, but it also tends to lengthen the indexing time. Required when index type is *HNSW*.
		EfConstruction *int `json:"efConstruction,omitempty"`

		// Nfactors Number of factors of product quantization
		Nfactors *int `json:"nfactors,omitempty"`

		// Nlist Number of cluster units
		Nlist *int `json:"nlist,omitempty"`
	} `json:"parameter,omitempty"`
}

// CollectionIndexIndexType defines model for CollectionIndex.IndexType.
type CollectionIndexIndexType string

// CollectionIndexMetricType defines model for CollectionIndex.MetricType.
type CollectionIndexMetricType string

// Configuration A key-value structure representing the caller's configuration
type Configuration map[string]string

// Embedding defines model for Embedding.
type Embedding struct {
	// Embedding The embedding of the text.
	Embedding *[]float32 `json:"embedding,omitempty"`

	// Index The index of the text in the original list.
	Index *int `json:"index,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Error The error message
	Error string `json:"error"`
}

// InvocationJob defines model for InvocationJob.
type InvocationJob struct {
	// Id The unique identifier for the invocation job
	Id string `json:"id"`

	// Meta The metadata of the invocation job
	Meta map[string]interface{} `json:"meta"`

	// Payload The payload for the invocation job
	Payload map[string]interface{} `json:"payload"`
}

// InvocationResult defines model for InvocationResult.
type InvocationResult struct {
	// AttemptedAt The timestamp when the job was retrieved and attempted by agent
	AttemptedAt *int64 `json:"attempted_at,omitempty"`

	// Errors The errors of the invocation job
	Errors *map[string]interface{} `json:"errors,omitempty"`

	// FinalizedAt The timestamp when the job was finalized
	FinalizedAt *int64 `json:"finalized_at,omitempty"`

	// Id The unique identifier for the invocation job
	Id string `json:"id"`

	// Result The result of the invocation job
	Result *map[string]interface{} `json:"result,omitempty"`

	// State The state of the invocation job
	// - available: The job is queued and waiting to be processed.
	// - running: The job is currently being executed.
	// - completed: The job has finished successfully.
	// - cancelled: The job was cancelled before completion.
	// - discarded: The job was discarded due to an error or system issue.
	State InvocationState `json:"state"`
}

// InvocationState The state of the invocation job
// - available: The job is queued and waiting to be processed.
// - running: The job is currently being executed.
// - completed: The job has finished successfully.
// - cancelled: The job was cancelled before completion.
// - discarded: The job was discarded due to an error or system issue.
type InvocationState string

// Message defines model for Message.
type Message struct {
	Content *[]MessageContent `json:"content,omitempty"`
	Role    *MessageRole      `json:"role,omitempty"`
}

// MessageRole defines model for Message.Role.
type MessageRole string

// MessageContent defines model for MessageContent.
type MessageContent struct {
	union json.RawMessage
}

// MessageContent0 defines model for .
type MessageContent0 struct {
	Text *string `json:"text,omitempty"`
}

// MessageContent1 defines model for .
type MessageContent1 struct {
	// Image The based64 encoded image file. Only "jpeg" and "png" are supported by all providers.
	Image *string `json:"image,omitempty"`
}

// MessageContent2 defines model for .
type MessageContent2 struct {
	// ImageUrl The URL of the image file. Only "jpeg" and "png" are supported by all providers.
	ImageUrl *string `json:"image_url,omitempty"`
}

// Permission defines model for Permission.
type Permission string

// RerankResult defines model for RerankResult.
type RerankResult struct {
	// Index The index of the document in the original list.
	Index *int `json:"index,omitempty"`

	// Score The score of the document.
	Score *float32 `json:"score,omitempty"`

	// Text The document.
	Text *string `json:"text,omitempty"`
}

// N400 defines model for 400.
type N400 = Error

// N500 defines model for 500.
type N500 = Error

// AdminListAgentsParams defines parameters for AdminListAgents.
type AdminListAgentsParams struct {
	// Page Page number (default 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Page number (default 10)
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Name Filter by agent ID
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// AdminListApiTokensParams defines parameters for AdminListApiTokens.
type AdminListApiTokensParams struct {
	// Page Page number (default 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Page number (default 10)
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// AgentId Filter by agent ID
	AgentId *int `form:"agent_id,omitempty" json:"agent_id,omitempty"`

	// CreatedBy Filter by creator
	CreatedBy *string `form:"created_by,omitempty" json:"created_by,omitempty"`
}

// CreateCompletionJSONBody defines parameters for CreateCompletion.
type CreateCompletionJSONBody struct {
	MaxTokens *int      `json:"max_tokens,omitempty"`
	Messages  []Message `json:"messages"`

	// ModelId The model id.
	ModelId string `json:"model_id"`

	// StopSequences Custom text sequences that will cause the model to stop generating.
	StopSequences *[]string `json:"stop_sequences,omitempty"`
	Temperature   *float32  `json:"temperature,omitempty"`
}

// CreateEmbeddingJSONBody defines parameters for CreateEmbedding.
type CreateEmbeddingJSONBody struct {
	// Input The text to embedded.
	Input []string `json:"input"`

	// ModelId The model id.
	ModelId string `json:"model_id"`
}

// CreateInvocationAsyncJSONBody defines parameters for CreateInvocationAsync.
type CreateInvocationAsyncJSONBody struct {
	// Agent The name of the agent to process the invocation job
	Agent string `json:"agent"`

	// Meta The metadata of the invocation job
	Meta map[string]interface{} `json:"meta"`

	// Payload The payload for the invocation job
	Payload map[string]interface{} `json:"payload"`
}

// GetNextInvocationParams defines parameters for GetNextInvocation.
type GetNextInvocationParams struct {
	// Wait Maximum time (in seconds) to wait for a job if none are immediately available. Default is 10s.
	Wait *int `form:"wait,omitempty" json:"wait,omitempty"`
}

// CreateInvocationSyncJSONBody defines parameters for CreateInvocationSync.
type CreateInvocationSyncJSONBody struct {
	// Agent The name of the agent to process the invocation job
	Agent string `json:"agent"`

	// Meta The metadata of the invocation job
	Meta map[string]interface{} `json:"meta"`

	// Payload The payload for the invocation job
	Payload map[string]interface{} `json:"payload"`
}

// GetInvocationByIdParams defines parameters for GetInvocationById.
type GetInvocationByIdParams struct {
	// Wait The maximum time (in seconds) to wait for job completion. If not specified, returns immediately.
	Wait *int `form:"wait,omitempty" json:"wait,omitempty"`
}

// ReturnInvocationErrorJSONBody defines parameters for ReturnInvocationError.
type ReturnInvocationErrorJSONBody struct {
	// Error The error details of the invocation
	Error *map[string]interface{} `json:"error,omitempty"`
}

// ReturnInvocationResponseJSONBody defines parameters for ReturnInvocationResponse.
type ReturnInvocationResponseJSONBody struct {
	// Result The result of the invocation
	Result *map[string]interface{} `json:"result,omitempty"`
}

// CreateRerankJSONBody defines parameters for CreateRerank.
type CreateRerankJSONBody struct {
	// Documents The list of documents.
	Documents []string `json:"documents"`

	// ModelId The model id.
	ModelId string `json:"model_id"`

	// Query The query.
	Query string `json:"query"`
}

// ListCollectionParams defines parameters for ListCollection.
type ListCollectionParams struct {
	// MAOSVECTORDATABASENAME The name of the database to be accessed.
	MAOSVECTORDATABASENAME string `json:"MAOS_VECTOR_DATABASE_NAME"`
}

// CreateCollectionJSONBody defines parameters for CreateCollection.
type CreateCollectionJSONBody struct {
	Fields  []CollectionField  `json:"fields"`
	Indexes *[]CollectionIndex `json:"indexes,omitempty"`

	// Name The name of the collection.
	Name string `json:"name"`
}

// CreateCollectionParams defines parameters for CreateCollection.
type CreateCollectionParams struct {
	// MAOSVECTORDATABASENAME The name of the database to be accessed.
	MAOSVECTORDATABASENAME string `json:"MAOS_VECTOR_DATABASE_NAME"`
}

// UpsertCollectionJSONBody defines parameters for UpsertCollection.
type UpsertCollectionJSONBody = map[string]interface{}

// AdminCreateAgentJSONRequestBody defines body for AdminCreateAgent for application/json ContentType.
type AdminCreateAgentJSONRequestBody = AgentCreate

// AdminCreateApiTokenJSONRequestBody defines body for AdminCreateApiToken for application/json ContentType.
type AdminCreateApiTokenJSONRequestBody = ApiTokenCreate

// CreateCompletionJSONRequestBody defines body for CreateCompletion for application/json ContentType.
type CreateCompletionJSONRequestBody CreateCompletionJSONBody

// CreateEmbeddingJSONRequestBody defines body for CreateEmbedding for application/json ContentType.
type CreateEmbeddingJSONRequestBody CreateEmbeddingJSONBody

// CreateInvocationAsyncJSONRequestBody defines body for CreateInvocationAsync for application/json ContentType.
type CreateInvocationAsyncJSONRequestBody CreateInvocationAsyncJSONBody

// CreateInvocationSyncJSONRequestBody defines body for CreateInvocationSync for application/json ContentType.
type CreateInvocationSyncJSONRequestBody CreateInvocationSyncJSONBody

// ReturnInvocationErrorJSONRequestBody defines body for ReturnInvocationError for application/json ContentType.
type ReturnInvocationErrorJSONRequestBody ReturnInvocationErrorJSONBody

// ReturnInvocationResponseJSONRequestBody defines body for ReturnInvocationResponse for application/json ContentType.
type ReturnInvocationResponseJSONRequestBody ReturnInvocationResponseJSONBody

// CreateRerankJSONRequestBody defines body for CreateRerank for application/json ContentType.
type CreateRerankJSONRequestBody CreateRerankJSONBody

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody CreateCollectionJSONBody

// UpsertCollectionJSONRequestBody defines body for UpsertCollection for application/json ContentType.
type UpsertCollectionJSONRequestBody = UpsertCollectionJSONBody

// AsMessageContent0 returns the union data inside the MessageContent as a MessageContent0
func (t MessageContent) AsMessageContent0() (MessageContent0, error) {
	var body MessageContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContent0 overwrites any union data inside the MessageContent as the provided MessageContent0
func (t *MessageContent) FromMessageContent0(v MessageContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContent0 performs a merge with any union data inside the MessageContent, using the provided MessageContent0
func (t *MessageContent) MergeMessageContent0(v MessageContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContent1 returns the union data inside the MessageContent as a MessageContent1
func (t MessageContent) AsMessageContent1() (MessageContent1, error) {
	var body MessageContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContent1 overwrites any union data inside the MessageContent as the provided MessageContent1
func (t *MessageContent) FromMessageContent1(v MessageContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContent1 performs a merge with any union data inside the MessageContent, using the provided MessageContent1
func (t *MessageContent) MergeMessageContent1(v MessageContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageContent2 returns the union data inside the MessageContent as a MessageContent2
func (t MessageContent) AsMessageContent2() (MessageContent2, error) {
	var body MessageContent2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageContent2 overwrites any union data inside the MessageContent as the provided MessageContent2
func (t *MessageContent) FromMessageContent2(v MessageContent2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageContent2 performs a merge with any union data inside the MessageContent, using the provided MessageContent2
func (t *MessageContent) MergeMessageContent2(v MessageContent2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageContent) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageContent) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Agents
	// (GET /v1/admin/agents)
	AdminListAgents(w http.ResponseWriter, r *http.Request, params AdminListAgentsParams)
	// Create a new Agent
	// (POST /v1/admin/agents)
	AdminCreateAgent(w http.ResponseWriter, r *http.Request)
	// List API tokens
	// (GET /v1/admin/api_tokens)
	AdminListApiTokens(w http.ResponseWriter, r *http.Request, params AdminListApiTokensParams)
	// Create a new API token
	// (POST /v1/admin/api_tokens)
	AdminCreateApiToken(w http.ResponseWriter, r *http.Request)
	// Generate text completion.
	// (POST /v1/completion)
	CreateCompletion(w http.ResponseWriter, r *http.Request)
	// Get model list.
	// (GET /v1/completion/models)
	ListCompletionModels(w http.ResponseWriter, r *http.Request)
	// Get configuration of the caller
	// (GET /v1/config)
	GetCallerConfig(w http.ResponseWriter, r *http.Request)
	// Create embedding of text.
	// (POST /v1/embedding)
	CreateEmbedding(w http.ResponseWriter, r *http.Request)
	// List embedding models.
	// (GET /v1/embedding/models)
	ListEmbeddingModels(w http.ResponseWriter, r *http.Request)
	// Create a new asynchronous invocation job.
	// (POST /v1/invocations/async)
	CreateInvocationAsync(w http.ResponseWriter, r *http.Request)
	// Retrieve the next available invocation job for processing
	// (GET /v1/invocations/next)
	GetNextInvocation(w http.ResponseWriter, r *http.Request, params GetNextInvocationParams)
	// Create a new synchronous invocation job
	// (POST /v1/invocations/sync)
	CreateInvocationSync(w http.ResponseWriter, r *http.Request)
	// Get the status and result of an invocation job by ID
	// (GET /v1/invocations/{id})
	GetInvocationById(w http.ResponseWriter, r *http.Request, id string, params GetInvocationByIdParams)
	// Return invocation error
	// (POST /v1/invocations/{invoke_id}/error)
	ReturnInvocationError(w http.ResponseWriter, r *http.Request, invokeId string)
	// Return invocation result
	// (POST /v1/invocations/{invoke_id}/response)
	ReturnInvocationResponse(w http.ResponseWriter, r *http.Request, invokeId string)
	// Measure the relevance of a list of documents to a query.
	// (POST /v1/rerank)
	CreateRerank(w http.ResponseWriter, r *http.Request)
	// List models.
	// (GET /v1/rerank/models)
	ListRerankModels(w http.ResponseWriter, r *http.Request)
	// List collection.
	// (GET /v1/vector/collection)
	ListCollection(w http.ResponseWriter, r *http.Request, params ListCollectionParams)
	// Create a collection.
	// (POST /v1/vector/collection)
	CreateCollection(w http.ResponseWriter, r *http.Request, params CreateCollectionParams)
	// query data from a collection.
	// (GET /v1/vector/collection/{name})
	QueryCollection(w http.ResponseWriter, r *http.Request, name string)
	// Upsert data into a collection.
	// (POST /v1/vector/collection/{name})
	UpsertCollection(w http.ResponseWriter, r *http.Request, name string)
	// List database.
	// (GET /v1/vector/list)
	ListVectoreStores(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AdminListAgents operation middleware
func (siw *ServerInterfaceWrapper) AdminListAgents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAgentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAgents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateAgent operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAgent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAgent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListApiTokens operation middleware
func (siw *ServerInterfaceWrapper) AdminListApiTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListApiTokensParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "agent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "agent_id", r.URL.Query(), &params.AgentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", r.URL.Query(), &params.CreatedBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListApiTokens(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateApiToken operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateApiToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateApiToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCompletion operation middleware
func (siw *ServerInterfaceWrapper) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCompletion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCompletionModels operation middleware
func (siw *ServerInterfaceWrapper) ListCompletionModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCompletionModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCallerConfig operation middleware
func (siw *ServerInterfaceWrapper) GetCallerConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCallerConfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmbedding operation middleware
func (siw *ServerInterfaceWrapper) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmbedding(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEmbeddingModels operation middleware
func (siw *ServerInterfaceWrapper) ListEmbeddingModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEmbeddingModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateInvocationAsync operation middleware
func (siw *ServerInterfaceWrapper) CreateInvocationAsync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateInvocationAsync(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNextInvocation operation middleware
func (siw *ServerInterfaceWrapper) GetNextInvocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNextInvocationParams

	// ------------- Optional query parameter "wait" -------------

	err = runtime.BindQueryParameter("form", true, false, "wait", r.URL.Query(), &params.Wait)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wait", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNextInvocation(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateInvocationSync operation middleware
func (siw *ServerInterfaceWrapper) CreateInvocationSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateInvocationSync(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInvocationById operation middleware
func (siw *ServerInterfaceWrapper) GetInvocationById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvocationByIdParams

	// ------------- Optional query parameter "wait" -------------

	err = runtime.BindQueryParameter("form", true, false, "wait", r.URL.Query(), &params.Wait)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wait", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInvocationById(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReturnInvocationError operation middleware
func (siw *ServerInterfaceWrapper) ReturnInvocationError(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoke_id" -------------
	var invokeId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoke_id", mux.Vars(r)["invoke_id"], &invokeId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoke_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReturnInvocationError(w, r, invokeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReturnInvocationResponse operation middleware
func (siw *ServerInterfaceWrapper) ReturnInvocationResponse(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "invoke_id" -------------
	var invokeId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoke_id", mux.Vars(r)["invoke_id"], &invokeId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "invoke_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReturnInvocationResponse(w, r, invokeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRerank operation middleware
func (siw *ServerInterfaceWrapper) CreateRerank(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRerank(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRerankModels operation middleware
func (siw *ServerInterfaceWrapper) ListRerankModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRerankModels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCollection operation middleware
func (siw *ServerInterfaceWrapper) ListCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCollectionParams

	headers := r.Header

	// ------------- Required header parameter "MAOS_VECTOR_DATABASE_NAME" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("MAOS_VECTOR_DATABASE_NAME")]; found {
		var MAOSVECTORDATABASENAME string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "MAOS_VECTOR_DATABASE_NAME", valueList[0], &MAOSVECTORDATABASENAME, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Err: err})
			return
		}

		params.MAOSVECTORDATABASENAME = MAOSVECTORDATABASENAME

	} else {
		err = fmt.Errorf("Header parameter MAOS_VECTOR_DATABASE_NAME is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCollection(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCollection operation middleware
func (siw *ServerInterfaceWrapper) CreateCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCollectionParams

	headers := r.Header

	// ------------- Required header parameter "MAOS_VECTOR_DATABASE_NAME" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("MAOS_VECTOR_DATABASE_NAME")]; found {
		var MAOSVECTORDATABASENAME string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "MAOS_VECTOR_DATABASE_NAME", valueList[0], &MAOSVECTORDATABASENAME, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Err: err})
			return
		}

		params.MAOSVECTORDATABASENAME = MAOSVECTORDATABASENAME

	} else {
		err = fmt.Errorf("Header parameter MAOS_VECTOR_DATABASE_NAME is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "MAOS_VECTOR_DATABASE_NAME", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCollection(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryCollection operation middleware
func (siw *ServerInterfaceWrapper) QueryCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", mux.Vars(r)["name"], &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryCollection(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertCollection operation middleware
func (siw *ServerInterfaceWrapper) UpsertCollection(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", mux.Vars(r)["name"], &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertCollection(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListVectoreStores operation middleware
func (siw *ServerInterfaceWrapper) ListVectoreStores(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, TraceScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVectoreStores(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v1/admin/agents", wrapper.AdminListAgents).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/admin/agents", wrapper.AdminCreateAgent).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/admin/api_tokens", wrapper.AdminListApiTokens).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/admin/api_tokens", wrapper.AdminCreateApiToken).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/completion", wrapper.CreateCompletion).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/completion/models", wrapper.ListCompletionModels).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/config", wrapper.GetCallerConfig).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/embedding", wrapper.CreateEmbedding).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/embedding/models", wrapper.ListEmbeddingModels).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/invocations/async", wrapper.CreateInvocationAsync).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/invocations/next", wrapper.GetNextInvocation).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/invocations/sync", wrapper.CreateInvocationSync).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/invocations/{id}", wrapper.GetInvocationById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/invocations/{invoke_id}/error", wrapper.ReturnInvocationError).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/invocations/{invoke_id}/response", wrapper.ReturnInvocationResponse).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/rerank", wrapper.CreateRerank).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/rerank/models", wrapper.ListRerankModels).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/vector/collection", wrapper.ListCollection).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/vector/collection", wrapper.CreateCollection).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/vector/collection/{name}", wrapper.QueryCollection).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/vector/collection/{name}", wrapper.UpsertCollection).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/vector/list", wrapper.ListVectoreStores).Methods("GET")

	return r
}

type N400JSONResponse Error

type N500JSONResponse Error

type AdminListAgentsRequestObject struct {
	Params AdminListAgentsParams
}

type AdminListAgentsResponseObject interface {
	VisitAdminListAgentsResponse(w http.ResponseWriter) error
}

type AdminListAgents200JSONResponse struct {
	Data []Agent `json:"data"`
	Meta struct {
		TotalPages int `json:"total_pages"`
	} `json:"meta"`
}

func (response AdminListAgents200JSONResponse) VisitAdminListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminListAgents401Response struct {
}

func (response AdminListAgents401Response) VisitAdminListAgentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminListAgents500Response struct {
}

func (response AdminListAgents500Response) VisitAdminListAgentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminCreateAgentRequestObject struct {
	Body *AdminCreateAgentJSONRequestBody
}

type AdminCreateAgentResponseObject interface {
	VisitAdminCreateAgentResponse(w http.ResponseWriter) error
}

type AdminCreateAgent201JSONResponse Agent

func (response AdminCreateAgent201JSONResponse) VisitAdminCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AdminCreateAgent401Response struct {
}

func (response AdminCreateAgent401Response) VisitAdminCreateAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminCreateAgent500Response struct {
}

func (response AdminCreateAgent500Response) VisitAdminCreateAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminListApiTokensRequestObject struct {
	Params AdminListApiTokensParams
}

type AdminListApiTokensResponseObject interface {
	VisitAdminListApiTokensResponse(w http.ResponseWriter) error
}

type AdminListApiTokens200JSONResponse struct {
	Data []ApiToken `json:"data"`
	Meta struct {
		TotalPages int `json:"total_pages"`
	} `json:"meta"`
}

func (response AdminListApiTokens200JSONResponse) VisitAdminListApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminListApiTokens401Response struct {
}

func (response AdminListApiTokens401Response) VisitAdminListApiTokensResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminListApiTokens500JSONResponse struct{ N500JSONResponse }

func (response AdminListApiTokens500JSONResponse) VisitAdminListApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AdminCreateApiTokenRequestObject struct {
	Body *AdminCreateApiTokenJSONRequestBody
}

type AdminCreateApiTokenResponseObject interface {
	VisitAdminCreateApiTokenResponse(w http.ResponseWriter) error
}

type AdminCreateApiToken201JSONResponse ApiToken

func (response AdminCreateApiToken201JSONResponse) VisitAdminCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AdminCreateApiToken400JSONResponse struct{ N400JSONResponse }

func (response AdminCreateApiToken400JSONResponse) VisitAdminCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AdminCreateApiToken401Response struct {
}

func (response AdminCreateApiToken401Response) VisitAdminCreateApiTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminCreateApiToken500JSONResponse struct{ N500JSONResponse }

func (response AdminCreateApiToken500JSONResponse) VisitAdminCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateCompletionRequestObject struct {
	Body *CreateCompletionJSONRequestBody
}

type CreateCompletionResponseObject interface {
	VisitCreateCompletionResponse(w http.ResponseWriter) error
}

type CreateCompletion200JSONResponse struct {
	Messages *[]Message `json:"messages,omitempty"`
}

func (response CreateCompletion200JSONResponse) VisitCreateCompletionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCompletion401Response struct {
}

func (response CreateCompletion401Response) VisitCreateCompletionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListCompletionModelsRequestObject struct {
}

type ListCompletionModelsResponseObject interface {
	VisitListCompletionModelsResponse(w http.ResponseWriter) error
}

type ListCompletionModels200JSONResponse struct {
	Data *[]struct {
		Id       *string `json:"id,omitempty"`
		Name     *string `json:"name,omitempty"`
		Provider *string `json:"provider,omitempty"`
	} `json:"data,omitempty"`
}

func (response ListCompletionModels200JSONResponse) VisitListCompletionModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCompletionModels401Response struct {
}

func (response ListCompletionModels401Response) VisitListCompletionModelsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCallerConfigRequestObject struct {
}

type GetCallerConfigResponseObject interface {
	VisitGetCallerConfigResponse(w http.ResponseWriter) error
}

type GetCallerConfig200JSONResponse Configuration

func (response GetCallerConfig200JSONResponse) VisitGetCallerConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCallerConfig401Response struct {
}

func (response GetCallerConfig401Response) VisitGetCallerConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateEmbeddingRequestObject struct {
	Body *CreateEmbeddingJSONRequestBody
}

type CreateEmbeddingResponseObject interface {
	VisitCreateEmbeddingResponse(w http.ResponseWriter) error
}

type CreateEmbedding200JSONResponse struct {
	// Data The embeddings of the text.
	Data *[]Embedding `json:"data,omitempty"`
}

func (response CreateEmbedding200JSONResponse) VisitCreateEmbeddingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateEmbedding401Response struct {
}

func (response CreateEmbedding401Response) VisitCreateEmbeddingResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListEmbeddingModelsRequestObject struct {
}

type ListEmbeddingModelsResponseObject interface {
	VisitListEmbeddingModelsResponse(w http.ResponseWriter) error
}

type ListEmbeddingModels200JSONResponse struct {
	Data *[]struct {
		// Dimension The dimension of the output vector.
		Dimension *int    `json:"dimension,omitempty"`
		Id        *string `json:"id,omitempty"`
		Name      *string `json:"name,omitempty"`
		Provider  *string `json:"provider,omitempty"`
	} `json:"data,omitempty"`
}

func (response ListEmbeddingModels200JSONResponse) VisitListEmbeddingModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEmbeddingModels401Response struct {
}

func (response ListEmbeddingModels401Response) VisitListEmbeddingModelsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateInvocationAsyncRequestObject struct {
	Body *CreateInvocationAsyncJSONRequestBody
}

type CreateInvocationAsyncResponseObject interface {
	VisitCreateInvocationAsyncResponse(w http.ResponseWriter) error
}

type CreateInvocationAsync201JSONResponse struct {
	// Id The unique identifier of the created invocation job
	Id string `json:"id"`
}

func (response CreateInvocationAsync201JSONResponse) VisitCreateInvocationAsyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvocationAsync400JSONResponse struct{ N400JSONResponse }

func (response CreateInvocationAsync400JSONResponse) VisitCreateInvocationAsyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvocationAsync401Response struct {
}

func (response CreateInvocationAsync401Response) VisitCreateInvocationAsyncResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateInvocationAsync500JSONResponse struct{ N500JSONResponse }

func (response CreateInvocationAsync500JSONResponse) VisitCreateInvocationAsyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNextInvocationRequestObject struct {
	Params GetNextInvocationParams
}

type GetNextInvocationResponseObject interface {
	VisitGetNextInvocationResponse(w http.ResponseWriter) error
}

type GetNextInvocation200JSONResponse InvocationJob

func (response GetNextInvocation200JSONResponse) VisitGetNextInvocationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNextInvocation401Response struct {
}

func (response GetNextInvocation401Response) VisitGetNextInvocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetNextInvocation404Response struct {
}

func (response GetNextInvocation404Response) VisitGetNextInvocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetNextInvocation500Response struct {
}

func (response GetNextInvocation500Response) VisitGetNextInvocationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateInvocationSyncRequestObject struct {
	Body *CreateInvocationSyncJSONRequestBody
}

type CreateInvocationSyncResponseObject interface {
	VisitCreateInvocationSyncResponse(w http.ResponseWriter) error
}

type CreateInvocationSync201JSONResponse struct {
	// Id The unique identifier of the created invocation job
	Id string `json:"id"`
}

func (response CreateInvocationSync201JSONResponse) VisitCreateInvocationSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvocationSync400JSONResponse struct{ N400JSONResponse }

func (response CreateInvocationSync400JSONResponse) VisitCreateInvocationSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvocationSync401Response struct {
}

func (response CreateInvocationSync401Response) VisitCreateInvocationSyncResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateInvocationSync500JSONResponse struct{ N500JSONResponse }

func (response CreateInvocationSync500JSONResponse) VisitCreateInvocationSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetInvocationByIdRequestObject struct {
	Id     string `json:"id"`
	Params GetInvocationByIdParams
}

type GetInvocationByIdResponseObject interface {
	VisitGetInvocationByIdResponse(w http.ResponseWriter) error
}

type GetInvocationById200JSONResponse InvocationResult

func (response GetInvocationById200JSONResponse) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInvocationById202JSONResponse InvocationJob

func (response GetInvocationById202JSONResponse) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type GetInvocationById400JSONResponse struct{ N400JSONResponse }

func (response GetInvocationById400JSONResponse) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetInvocationById401Response struct {
}

func (response GetInvocationById401Response) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetInvocationById404Response struct {
}

func (response GetInvocationById404Response) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetInvocationById500JSONResponse struct{ N500JSONResponse }

func (response GetInvocationById500JSONResponse) VisitGetInvocationByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReturnInvocationErrorRequestObject struct {
	InvokeId string `json:"invoke_id"`
	Body     *ReturnInvocationErrorJSONRequestBody
}

type ReturnInvocationErrorResponseObject interface {
	VisitReturnInvocationErrorResponse(w http.ResponseWriter) error
}

type ReturnInvocationError200Response struct {
}

func (response ReturnInvocationError200Response) VisitReturnInvocationErrorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReturnInvocationError401Response struct {
}

func (response ReturnInvocationError401Response) VisitReturnInvocationErrorResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReturnInvocationError404Response struct {
}

func (response ReturnInvocationError404Response) VisitReturnInvocationErrorResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ReturnInvocationError500Response struct {
}

func (response ReturnInvocationError500Response) VisitReturnInvocationErrorResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ReturnInvocationResponseRequestObject struct {
	InvokeId string `json:"invoke_id"`
	Body     *ReturnInvocationResponseJSONRequestBody
}

type ReturnInvocationResponseResponseObject interface {
	VisitReturnInvocationResponseResponse(w http.ResponseWriter) error
}

type ReturnInvocationResponse200Response struct {
}

func (response ReturnInvocationResponse200Response) VisitReturnInvocationResponseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReturnInvocationResponse401Response struct {
}

func (response ReturnInvocationResponse401Response) VisitReturnInvocationResponseResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReturnInvocationResponse404Response struct {
}

func (response ReturnInvocationResponse404Response) VisitReturnInvocationResponseResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ReturnInvocationResponse500Response struct {
}

func (response ReturnInvocationResponse500Response) VisitReturnInvocationResponseResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateRerankRequestObject struct {
	Body *CreateRerankJSONRequestBody
}

type CreateRerankResponseObject interface {
	VisitCreateRerankResponse(w http.ResponseWriter) error
}

type CreateRerank201JSONResponse struct {
	Data *[]RerankResult `json:"data,omitempty"`
}

func (response CreateRerank201JSONResponse) VisitCreateRerankResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRerank401Response struct {
}

func (response CreateRerank401Response) VisitCreateRerankResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListRerankModelsRequestObject struct {
}

type ListRerankModelsResponseObject interface {
	VisitListRerankModelsResponse(w http.ResponseWriter) error
}

type ListRerankModels200JSONResponse struct {
	Data *[]struct {
		Id       *string `json:"id,omitempty"`
		Name     *string `json:"name,omitempty"`
		Provider *string `json:"provider,omitempty"`
	} `json:"data,omitempty"`
}

func (response ListRerankModels200JSONResponse) VisitListRerankModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRerankModels401Response struct {
}

func (response ListRerankModels401Response) VisitListRerankModelsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListCollectionRequestObject struct {
	Params ListCollectionParams
}

type ListCollectionResponseObject interface {
	VisitListCollectionResponse(w http.ResponseWriter) error
}

type ListCollection200JSONResponse struct {
	// Data The list of collections.
	Data *[]string `json:"data,omitempty"`
}

func (response ListCollection200JSONResponse) VisitListCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCollection401Response struct {
}

func (response ListCollection401Response) VisitListCollectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateCollectionRequestObject struct {
	Params CreateCollectionParams
	Body   *CreateCollectionJSONRequestBody
}

type CreateCollectionResponseObject interface {
	VisitCreateCollectionResponse(w http.ResponseWriter) error
}

type CreateCollection200JSONResponse struct {
	// Data The name of the collection.
	Data *string `json:"data,omitempty"`
}

func (response CreateCollection200JSONResponse) VisitCreateCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCollection401Response struct {
}

func (response CreateCollection401Response) VisitCreateCollectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type QueryCollectionRequestObject struct {
	Name string `json:"name"`
}

type QueryCollectionResponseObject interface {
	VisitQueryCollectionResponse(w http.ResponseWriter) error
}

type QueryCollection200JSONResponse map[string]interface{}

func (response QueryCollection200JSONResponse) VisitQueryCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type QueryCollection401Response struct {
}

func (response QueryCollection401Response) VisitQueryCollectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpsertCollectionRequestObject struct {
	Name string `json:"name"`
	Body *UpsertCollectionJSONRequestBody
}

type UpsertCollectionResponseObject interface {
	VisitUpsertCollectionResponse(w http.ResponseWriter) error
}

type UpsertCollection200JSONResponse map[string]interface{}

func (response UpsertCollection200JSONResponse) VisitUpsertCollectionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpsertCollection401Response struct {
}

func (response UpsertCollection401Response) VisitUpsertCollectionResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListVectoreStoresRequestObject struct {
}

type ListVectoreStoresResponseObject interface {
	VisitListVectoreStoresResponse(w http.ResponseWriter) error
}

type ListVectoreStores200JSONResponse struct {
	// Data The list of databases.
	Data *[]string `json:"data,omitempty"`
}

func (response ListVectoreStores200JSONResponse) VisitListVectoreStoresResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListVectoreStores401Response struct {
}

func (response ListVectoreStores401Response) VisitListVectoreStoresResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List Agents
	// (GET /v1/admin/agents)
	AdminListAgents(ctx context.Context, request AdminListAgentsRequestObject) (AdminListAgentsResponseObject, error)
	// Create a new Agent
	// (POST /v1/admin/agents)
	AdminCreateAgent(ctx context.Context, request AdminCreateAgentRequestObject) (AdminCreateAgentResponseObject, error)
	// List API tokens
	// (GET /v1/admin/api_tokens)
	AdminListApiTokens(ctx context.Context, request AdminListApiTokensRequestObject) (AdminListApiTokensResponseObject, error)
	// Create a new API token
	// (POST /v1/admin/api_tokens)
	AdminCreateApiToken(ctx context.Context, request AdminCreateApiTokenRequestObject) (AdminCreateApiTokenResponseObject, error)
	// Generate text completion.
	// (POST /v1/completion)
	CreateCompletion(ctx context.Context, request CreateCompletionRequestObject) (CreateCompletionResponseObject, error)
	// Get model list.
	// (GET /v1/completion/models)
	ListCompletionModels(ctx context.Context, request ListCompletionModelsRequestObject) (ListCompletionModelsResponseObject, error)
	// Get configuration of the caller
	// (GET /v1/config)
	GetCallerConfig(ctx context.Context, request GetCallerConfigRequestObject) (GetCallerConfigResponseObject, error)
	// Create embedding of text.
	// (POST /v1/embedding)
	CreateEmbedding(ctx context.Context, request CreateEmbeddingRequestObject) (CreateEmbeddingResponseObject, error)
	// List embedding models.
	// (GET /v1/embedding/models)
	ListEmbeddingModels(ctx context.Context, request ListEmbeddingModelsRequestObject) (ListEmbeddingModelsResponseObject, error)
	// Create a new asynchronous invocation job.
	// (POST /v1/invocations/async)
	CreateInvocationAsync(ctx context.Context, request CreateInvocationAsyncRequestObject) (CreateInvocationAsyncResponseObject, error)
	// Retrieve the next available invocation job for processing
	// (GET /v1/invocations/next)
	GetNextInvocation(ctx context.Context, request GetNextInvocationRequestObject) (GetNextInvocationResponseObject, error)
	// Create a new synchronous invocation job
	// (POST /v1/invocations/sync)
	CreateInvocationSync(ctx context.Context, request CreateInvocationSyncRequestObject) (CreateInvocationSyncResponseObject, error)
	// Get the status and result of an invocation job by ID
	// (GET /v1/invocations/{id})
	GetInvocationById(ctx context.Context, request GetInvocationByIdRequestObject) (GetInvocationByIdResponseObject, error)
	// Return invocation error
	// (POST /v1/invocations/{invoke_id}/error)
	ReturnInvocationError(ctx context.Context, request ReturnInvocationErrorRequestObject) (ReturnInvocationErrorResponseObject, error)
	// Return invocation result
	// (POST /v1/invocations/{invoke_id}/response)
	ReturnInvocationResponse(ctx context.Context, request ReturnInvocationResponseRequestObject) (ReturnInvocationResponseResponseObject, error)
	// Measure the relevance of a list of documents to a query.
	// (POST /v1/rerank)
	CreateRerank(ctx context.Context, request CreateRerankRequestObject) (CreateRerankResponseObject, error)
	// List models.
	// (GET /v1/rerank/models)
	ListRerankModels(ctx context.Context, request ListRerankModelsRequestObject) (ListRerankModelsResponseObject, error)
	// List collection.
	// (GET /v1/vector/collection)
	ListCollection(ctx context.Context, request ListCollectionRequestObject) (ListCollectionResponseObject, error)
	// Create a collection.
	// (POST /v1/vector/collection)
	CreateCollection(ctx context.Context, request CreateCollectionRequestObject) (CreateCollectionResponseObject, error)
	// query data from a collection.
	// (GET /v1/vector/collection/{name})
	QueryCollection(ctx context.Context, request QueryCollectionRequestObject) (QueryCollectionResponseObject, error)
	// Upsert data into a collection.
	// (POST /v1/vector/collection/{name})
	UpsertCollection(ctx context.Context, request UpsertCollectionRequestObject) (UpsertCollectionResponseObject, error)
	// List database.
	// (GET /v1/vector/list)
	ListVectoreStores(ctx context.Context, request ListVectoreStoresRequestObject) (ListVectoreStoresResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AdminListAgents operation middleware
func (sh *strictHandler) AdminListAgents(w http.ResponseWriter, r *http.Request, params AdminListAgentsParams) {
	var request AdminListAgentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdminListAgents(ctx, request.(AdminListAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminListAgents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdminListAgentsResponseObject); ok {
		if err := validResponse.VisitAdminListAgentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminCreateAgent operation middleware
func (sh *strictHandler) AdminCreateAgent(w http.ResponseWriter, r *http.Request) {
	var request AdminCreateAgentRequestObject

	var body AdminCreateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdminCreateAgent(ctx, request.(AdminCreateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminCreateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdminCreateAgentResponseObject); ok {
		if err := validResponse.VisitAdminCreateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminListApiTokens operation middleware
func (sh *strictHandler) AdminListApiTokens(w http.ResponseWriter, r *http.Request, params AdminListApiTokensParams) {
	var request AdminListApiTokensRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdminListApiTokens(ctx, request.(AdminListApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminListApiTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdminListApiTokensResponseObject); ok {
		if err := validResponse.VisitAdminListApiTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminCreateApiToken operation middleware
func (sh *strictHandler) AdminCreateApiToken(w http.ResponseWriter, r *http.Request) {
	var request AdminCreateApiTokenRequestObject

	var body AdminCreateApiTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdminCreateApiToken(ctx, request.(AdminCreateApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminCreateApiToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdminCreateApiTokenResponseObject); ok {
		if err := validResponse.VisitAdminCreateApiTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCompletion operation middleware
func (sh *strictHandler) CreateCompletion(w http.ResponseWriter, r *http.Request) {
	var request CreateCompletionRequestObject

	var body CreateCompletionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCompletion(ctx, request.(CreateCompletionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCompletion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCompletionResponseObject); ok {
		if err := validResponse.VisitCreateCompletionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCompletionModels operation middleware
func (sh *strictHandler) ListCompletionModels(w http.ResponseWriter, r *http.Request) {
	var request ListCompletionModelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCompletionModels(ctx, request.(ListCompletionModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCompletionModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCompletionModelsResponseObject); ok {
		if err := validResponse.VisitListCompletionModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCallerConfig operation middleware
func (sh *strictHandler) GetCallerConfig(w http.ResponseWriter, r *http.Request) {
	var request GetCallerConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCallerConfig(ctx, request.(GetCallerConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCallerConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCallerConfigResponseObject); ok {
		if err := validResponse.VisitGetCallerConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEmbedding operation middleware
func (sh *strictHandler) CreateEmbedding(w http.ResponseWriter, r *http.Request) {
	var request CreateEmbeddingRequestObject

	var body CreateEmbeddingJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEmbedding(ctx, request.(CreateEmbeddingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEmbedding")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEmbeddingResponseObject); ok {
		if err := validResponse.VisitCreateEmbeddingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListEmbeddingModels operation middleware
func (sh *strictHandler) ListEmbeddingModels(w http.ResponseWriter, r *http.Request) {
	var request ListEmbeddingModelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListEmbeddingModels(ctx, request.(ListEmbeddingModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEmbeddingModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListEmbeddingModelsResponseObject); ok {
		if err := validResponse.VisitListEmbeddingModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateInvocationAsync operation middleware
func (sh *strictHandler) CreateInvocationAsync(w http.ResponseWriter, r *http.Request) {
	var request CreateInvocationAsyncRequestObject

	var body CreateInvocationAsyncJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateInvocationAsync(ctx, request.(CreateInvocationAsyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateInvocationAsync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateInvocationAsyncResponseObject); ok {
		if err := validResponse.VisitCreateInvocationAsyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNextInvocation operation middleware
func (sh *strictHandler) GetNextInvocation(w http.ResponseWriter, r *http.Request, params GetNextInvocationParams) {
	var request GetNextInvocationRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNextInvocation(ctx, request.(GetNextInvocationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNextInvocation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNextInvocationResponseObject); ok {
		if err := validResponse.VisitGetNextInvocationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateInvocationSync operation middleware
func (sh *strictHandler) CreateInvocationSync(w http.ResponseWriter, r *http.Request) {
	var request CreateInvocationSyncRequestObject

	var body CreateInvocationSyncJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateInvocationSync(ctx, request.(CreateInvocationSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateInvocationSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateInvocationSyncResponseObject); ok {
		if err := validResponse.VisitCreateInvocationSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInvocationById operation middleware
func (sh *strictHandler) GetInvocationById(w http.ResponseWriter, r *http.Request, id string, params GetInvocationByIdParams) {
	var request GetInvocationByIdRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetInvocationById(ctx, request.(GetInvocationByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInvocationById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetInvocationByIdResponseObject); ok {
		if err := validResponse.VisitGetInvocationByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReturnInvocationError operation middleware
func (sh *strictHandler) ReturnInvocationError(w http.ResponseWriter, r *http.Request, invokeId string) {
	var request ReturnInvocationErrorRequestObject

	request.InvokeId = invokeId

	var body ReturnInvocationErrorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReturnInvocationError(ctx, request.(ReturnInvocationErrorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReturnInvocationError")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReturnInvocationErrorResponseObject); ok {
		if err := validResponse.VisitReturnInvocationErrorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReturnInvocationResponse operation middleware
func (sh *strictHandler) ReturnInvocationResponse(w http.ResponseWriter, r *http.Request, invokeId string) {
	var request ReturnInvocationResponseRequestObject

	request.InvokeId = invokeId

	var body ReturnInvocationResponseJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReturnInvocationResponse(ctx, request.(ReturnInvocationResponseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReturnInvocationResponse")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReturnInvocationResponseResponseObject); ok {
		if err := validResponse.VisitReturnInvocationResponseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRerank operation middleware
func (sh *strictHandler) CreateRerank(w http.ResponseWriter, r *http.Request) {
	var request CreateRerankRequestObject

	var body CreateRerankJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRerank(ctx, request.(CreateRerankRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRerank")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRerankResponseObject); ok {
		if err := validResponse.VisitCreateRerankResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRerankModels operation middleware
func (sh *strictHandler) ListRerankModels(w http.ResponseWriter, r *http.Request) {
	var request ListRerankModelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRerankModels(ctx, request.(ListRerankModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRerankModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRerankModelsResponseObject); ok {
		if err := validResponse.VisitListRerankModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCollection operation middleware
func (sh *strictHandler) ListCollection(w http.ResponseWriter, r *http.Request, params ListCollectionParams) {
	var request ListCollectionRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCollection(ctx, request.(ListCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCollectionResponseObject); ok {
		if err := validResponse.VisitListCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCollection operation middleware
func (sh *strictHandler) CreateCollection(w http.ResponseWriter, r *http.Request, params CreateCollectionParams) {
	var request CreateCollectionRequestObject

	request.Params = params

	var body CreateCollectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCollection(ctx, request.(CreateCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCollectionResponseObject); ok {
		if err := validResponse.VisitCreateCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// QueryCollection operation middleware
func (sh *strictHandler) QueryCollection(w http.ResponseWriter, r *http.Request, name string) {
	var request QueryCollectionRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.QueryCollection(ctx, request.(QueryCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "QueryCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(QueryCollectionResponseObject); ok {
		if err := validResponse.VisitQueryCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpsertCollection operation middleware
func (sh *strictHandler) UpsertCollection(w http.ResponseWriter, r *http.Request, name string) {
	var request UpsertCollectionRequestObject

	request.Name = name

	var body UpsertCollectionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpsertCollection(ctx, request.(UpsertCollectionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpsertCollection")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpsertCollectionResponseObject); ok {
		if err := validResponse.VisitUpsertCollectionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListVectoreStores operation middleware
func (sh *strictHandler) ListVectoreStores(w http.ResponseWriter, r *http.Request) {
	var request ListVectoreStoresRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListVectoreStores(ctx, request.(ListVectoreStoresRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListVectoreStores")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListVectoreStoresResponseObject); ok {
		if err := validResponse.VisitListVectoreStoresResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
