// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: config.sql

package dbsqlc

import (
	"context"
)

const configFindByAgentId = `-- name: ConfigFindByAgentId :one
SELECT configs.id, configs.agent_id, configs.config_suite_id, configs.content, configs.min_agent_version, configs.created_by, configs.created_at, configs.updated_by, configs.updated_at, agents.name AS agent_name
FROM configs
JOIN agents ON configs.agent_id = agents.id
WHERE configs.agent_id = $1
ORDER BY configs.created_at DESC, configs.id DESC
LIMIT 1
`

type ConfigFindByAgentIdRow struct {
	ID              int64
	AgentId         int64
	ConfigSuiteID   *int64
	Content         []byte
	MinAgentVersion *string
	CreatedBy       string
	CreatedAt       int64
	UpdatedBy       *string
	UpdatedAt       *int64
	AgentName       string
}

func (q *Queries) ConfigFindByAgentId(ctx context.Context, db DBTX, agentID int64) (*ConfigFindByAgentIdRow, error) {
	row := db.QueryRow(ctx, configFindByAgentId, agentID)
	var i ConfigFindByAgentIdRow
	err := row.Scan(
		&i.ID,
		&i.AgentId,
		&i.ConfigSuiteID,
		&i.Content,
		&i.MinAgentVersion,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.AgentName,
	)
	return &i, err
}

const configInsert = `-- name: ConfigInsert :one
INSERT INTO configs(
    agent_id,
    content,
    created_by,
    min_agent_version
) VALUES (
    $1::bigint,
    $2::jsonb,
    $3::text,
    $4::text
) RETURNING id, agent_id, config_suite_id, content, min_agent_version, created_by, created_at, updated_by, updated_at
`

type ConfigInsertParams struct {
	AgentId         int64
	Content         []byte
	CreatedBy       string
	MinAgentVersion *string
}

func (q *Queries) ConfigInsert(ctx context.Context, db DBTX, arg *ConfigInsertParams) (*Config, error) {
	row := db.QueryRow(ctx, configInsert,
		arg.AgentId,
		arg.Content,
		arg.CreatedBy,
		arg.MinAgentVersion,
	)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.AgentId,
		&i.ConfigSuiteID,
		&i.Content,
		&i.MinAgentVersion,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return &i, err
}
