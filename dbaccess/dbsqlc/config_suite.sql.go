// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: config_suite.sql

package dbsqlc

import (
	"context"
)

const configSuiteActivate = `-- name: ConfigSuiteActivate :exec
WITH deactivate_others AS (
    UPDATE config_suites
    SET active = false
    WHERE active = true AND id <> $1::bigint
)
UPDATE config_suites
SET active = true
WHERE id = $1::bigint
`

// Deactivate all other config suites and then activate the given config suite
func (q *Queries) ConfigSuiteActivate(ctx context.Context, db DBTX, id int64) error {
	_, err := db.Exec(ctx, configSuiteActivate, id)
	return err
}

const configSuiteGetById = `-- name: ConfigSuiteGetById :one
SELECT id, active, created_by, created_at, updated_by, updated_at, deployed_at
FROM config_suites
WHERE id = $1::bigint
LIMIT 1
`

func (q *Queries) ConfigSuiteGetById(ctx context.Context, db DBTX, id int64) (*ConfigSuite, error) {
	row := db.QueryRow(ctx, configSuiteGetById, id)
	var i ConfigSuite
	err := row.Scan(
		&i.ID,
		&i.Active,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.DeployedAt,
	)
	return &i, err
}
